---
version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      # Публикуем внешний слушатель (EXTERNAL) на порт KAFKA_PORT (например, 9093)
      - "${KAFKA_EXTERNAL_PORT}:9093"
      # Внутренний слушатель (INTERNAL) доступен только в сети Docker
      - "${KAFKA_INTERNAL_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Определяем два слушателя:
      #  - INTERNAL – слушает на 9092 внутри Docker-сети
      #  - EXTERNAL – слушает на 9093 для внешних подключений
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      # В метаданных клиентам будет возвращён внутренний адрес для контейнеров и внешний для внешних клиентов
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://${HOST}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      # Для внутрикластерного общения (между брокерами) используется INTERNAL-слушатель
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "${KAFKA_UI_PORT}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      # Для внутренних контейнеров используем INTERNAL-слушатель, так как имя "kafka" разрешается в сети Docker
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      AUTH_TYPE: "LOGIN_FORM"
      SPRING_SECURITY_USER_NAME: "${KAFKA_UI_USER}"
      SPRING_SECURITY_USER_PASSWORD: "${KAFKA_UI_PASS}"
    depends_on:
      - kafka

  postgres:
    image: "postgres:16"
    container_name: "postgres"
    environment:
      POSTGRES_USER: "${DB_USERNAME}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USERNAME}" ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  postgres-data:
